#!@PYTHON@
"""
This module defines a class (App) that launches a starrynite session from
file arguments provided on the command-line.  When run as a main module,
this file creates and runs an instance of App.
"""

import sys
sys.path.append("@pyexecdir@")

import optparse
try:
    import starrynite as sn
except:
    import textwrap
    print >> sys.stderr, textwrap.fill("ERROR: Could not import " \
        "starrynite.  Please make sure it is installed.")

class App(object):
    """
    Launches a starrynite session from file arguments provided on the
    command-line
    """

    def run(self, argv):
        """
        Handles command line arguments; returns an exit status
        """
        try:
            self._handle_args(argv)
        except Error, err:
            if err.msg:
                print >> sys.stderr, err.msg
            return err.status

    def _handle_args(self, command_line_args):
        """
        Handles command-line arguments; throws self.Error on failure
        """
        opts, args = self.parser.parse_args(command_line_args[1:])

        if len(args) != 2:
            self.parser.error("incorrect number of arguments")

        return sn.run_starrynite(args[0], args[1], opts.skip_svm_classifier)

    def __init__(self):
        """
        Creates a new App instance, initializing App.parser
        """
        usage = "usage: %prog [options] {input tiff file prefix} {parameter file}"
        version = "%prog @PACKAGE_VERSION@"
        parser = OptionParser(usage=usage, version=version)
        
        parser.add_option("-s", "--skip-svm-classifier",
                  action="store_true", default=False,
                  help="don't run the svm classifier")
        
        self.parser = parser

class OptionParser(optparse.OptionParser):
    """
    An optparse.OptionParser extension that raises an exception
    instead of calling sys.exit on error
    """
    def exit(self, status=0, msg=None):
        """
        Signals that an error has occured; overriding default behavior
        """
        raise Error(status, msg)

class Error(Exception):
    """
    Indicates that an error occurred during parsing
    """
    def __init__(self, status, msg=None):
        Exception.__init__(self)
        self.msg = msg
        self.status = status

if __name__ == "__main__":
    # create and run the application
    sys.exit(App().run(sys.argv))
