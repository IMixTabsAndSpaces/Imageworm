#!/usr/bin/perl -w
use File::Spec::Functions qw(rel2abs);
use File::Basename;
use Cwd;
$SCRIPTLOCATION=dirname(rel2abs($0));
#SCRIPTLOCATION=dirname(0);

#check that have 2 arguments tiff path and parameter file
if ($#ARGV<1){
	#printf(" usage .\\process_sequence.prl tiff_root_name matlab_parameterfile \n");
	die(" error: usage .\\process_sequence.prl tiff_root_name matlab_parameterfile \n");
}

$SUFFIX="";
if ($#ARGV==2){
	$SUFFIX=$ARGV[2];
}

$SNPATH="\"".$SCRIPTLOCATION."/starrynite.exe\"";
#$SNPATH="l:/bin/starryniteII/starrynite.exe";
#$SNPATH="./starrynite.exe";

$LAUNCHDIR=cwd;



#production version path

#$MATLABCOMMAND="\"".$SCRIPTLOCATION."/commandLineDriver.exe\" ";




$MATLABCOMMAND="matlab -automation -wait  -r \"commandLineDriver('";



$TIFFLOCATION="image/tif/";


#parse sequence name from tiff path
$_=$ARGV[0];
/(.*\/)(.*)/;
$DIRECTORY=$1;
$FILEROOT=$2;

if(length($SUFFIX)==0){
printf("using suffix zero".$FILEROOT.$FILEROOT."\n");
$MATLABNUCLOCATION=$FILEROOT."_matlabnuclei/";
}
else{
$MATLABNUCLOCATION=$FILEROOT."_".$SUFFIX."_matlabnuclei/";
}

$SNPARAMFILE=$DIRECTORY.$FILEROOT."_".$SUFFIX."_sn_parameterfile.txt";

#detect cells with matlab
printf("running matlab nuclear detection:\n");

#go to script location so it can find supplemental files
chdir($SCRIPTLOCATION);

#production version
#printf($MATLABCOMMAND.$ARGV[1]." ".$DIRECTORY." ".$FILEROOT." ".$SUFFIX."\n");
#system($MATLABCOMMAND.$ARGV[1]." ".$DIRECTORY." ".$FILEROOT." ".$SUFFIX);

printf($MATLABCOMMAND.$ARGV[1]."','".$DIRECTORY."','".$FILEROOT."','".$SUFFIX."')\"\n");
system($MATLABCOMMAND.$ARGV[1]."','".$DIRECTORY."','".$FILEROOT."','".$SUFFIX."')\"");

#go back so that lineaging occurs using launch dir as working directory
chdir($LAUNCHDIR);



#lineage matlab result

printf("running lineaging:\n");
printf($SNPATH."  ".$DIRECTORY.$TIFFLOCATION.$FILEROOT." ./ ".$SNPARAMFILE." ".$DIRECTORY.$MATLABNUCLOCATION."\n");
system($SNPATH."  ".$DIRECTORY.$TIFFLOCATION.$FILEROOT." ./ ".$SNPARAMFILE." ".$DIRECTORY.$MATLABNUCLOCATION);

#zip result and put in dat directory
#make temp directory to zip
system("mkdir ".$DIRECTORY."nuclei");	
system("mkdir ".$DIRECTORY."parameters");	

system("mv *-nuclei ".$DIRECTORY."nuclei");
#this is going to fail if path to parameterfile has space in it
system("cp ".$ARGV[1]." ".$DIRECTORY."parameters/".$FILEROOT."-mparameters");
system("mv ".$SNPARAMFILE." ".$DIRECTORY."parameters/".$FILEROOT."-parameters");

chdir($DIRECTORY);
system("zip ".$DIRECTORY.$FILEROOT.$SUFFIX.".zip "."nuclei/* "."parameters/*");

#clean up temp directory after zipped
system("rm -rf ".$DIRECTORY."nuclei");	
system("rm -rf ".$DIRECTORY."parameters");

#in production remove matlab per slice nuclei directory
#system("rm -rf ".$DIRECTORY.$MATLABNUCLOCATION);


if(! -e($DIRECTORY."annot")){
system("mkdir ".$DIRECTORY."annot");
}
if(! -e($DIRECTORY."annot/dats")){
system("mkdir ".$DIRECTORY."annot/dats");
}
system("mv ".$DIRECTORY.$FILEROOT.$SUFFIX.".zip ".$DIRECTORY."annot/dats");

#rename matlab file if suffix exists 
#dont need to do that since file is now already saved with this name
#system("mv ".$DIRECTORY.$FILEROOT."_fullmatlabresult.mat ".$DIRECTORY.$FILEROOT.$SUFFIX."_fullmatlabresult.mat " );




#create xml dat file to match computed result

#first read data from config file
$XYRES="0.254";
$ZRES="1";
$SLICES="30";
open(PARAMFILEIN,"<".$ARGV[1]);

while(<PARAMFILEIN>){
if(/zres\=(.+)\;.*/){
	$ZRES=$1;
}
if(/xyres\=(.+)\;.*/){
	$XYRES=$1;
}
if(/slices\=(.+)\;.*/){
	$SLICES=$1;
}
}

printf("outputing xml file with xy res ".$XYRES." z res ".$ZRES." slices ".$SLICES."\n");

open (PARAMFILE, ">".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".xml");
print PARAMFILE "<?xml version='1.0' encoding='utf-8'?>\n";
print PARAMFILE  "<embryo>\n";

print PARAMFILE "<image file=\"".$DIRECTORY.$TIFFLOCATION.$FILEROOT."-t001-p01.tif\"/>\n";
print PARAMFILE "<nuclei file=\"".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".zip\"/>\n";

print PARAMFILE "<end index=\"475\"/>\n";
#print PARAMFILE "<resolution xyRes=\"0.254\" zRes=\"1\" planeEnd=\"30\"/> <exprCorr type=\"blot\"/>\n";
 
print PARAMFILE "<resolution xyRes=\"".$XYRES."\" zRes=\"".$ZRES."\" planeEnd=\"".$SLICES."\"/> <exprCorr type=\"blot\"/>\n"; 
print PARAMFILE "<polar size=\"15\"/>\n";

print PARAMFILE "</embryo>";
close(PARAMFILE);


chdir($SCRIPTLOCATION);

#run analysis program
#system(" java -Xmx500m -cp \"".$SCRIPTLOCATION."/acebatch2.jar\" Measure1 ".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".xml");
#system(" java -Xmx500m -cp ".$SCRIPTLOCATION."/acebatch2.jar Measure1 ".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".xml");
#printf(" java -Xmx500m -cp ".$SCRIPTLOCATION."/acebatch2.jar Measure1 ".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".xml\n");
#system(" java -Xmx500m -cp l:/bin/NewAcetree/acebatch2.jar Measure1 ".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".xml");
system(" java -Xmx500m -cp acebatch2.jar Measure1 ".$DIRECTORY."annot/dats/".$FILEROOT.$SUFFIX.".xml");


